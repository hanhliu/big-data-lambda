version: '3.8'

networks:
  weather-network:
    driver: bridge

volumes:
  kafka-data:
  zookeeper-data:
  minio-data:

services:
  # Zookeeper cho Kafka
  zookeeper:
    image: confluentinc/cp-zookeeper:7.5.0
    hostname: zookeeper
    container_name: weather-zookeeper
    networks:
      - weather-network
    ports:
      - "2181:2181"
    environment:
      ZOOKEEPER_CLIENT_PORT: 2181
      ZOOKEEPER_TICK_TIME: 2000
    volumes:
      - zookeeper-data:/var/lib/zookeeper/data
    healthcheck:
      test: ["CMD", "nc", "-z", "localhost", "2181"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Kafka
  kafka:
    image: confluentinc/cp-kafka:7.5.0
    hostname: kafka
    container_name: weather-kafka
    networks:
      - weather-network
    depends_on:
      zookeeper:
        condition: service_healthy
    ports:
      - "9092:9092"
      - "9093:9093"
    environment:
      KAFKA_BROKER_ID: 1
      KAFKA_ZOOKEEPER_CONNECT: 'zookeeper:2181'
      KAFKA_LISTENER_SECURITY_PROTOCOL_MAP: PLAINTEXT:PLAINTEXT,PLAINTEXT_HOST:PLAINTEXT
      KAFKA_ADVERTISED_LISTENERS: PLAINTEXT://kafka:29092,PLAINTEXT_HOST://localhost:9092
      KAFKA_OFFSETS_TOPIC_REPLICATION_FACTOR: 1
      KAFKA_TRANSACTION_STATE_LOG_MIN_ISR: 1
      KAFKA_TRANSACTION_STATE_LOG_REPLICATION_FACTOR: 1
      KAFKA_GROUP_INITIAL_REBALANCE_DELAY_MS: 0
      KAFKA_AUTO_CREATE_TOPICS_ENABLE: 'true'
    volumes:
      - kafka-data:/var/lib/kafka/data
    healthcheck:
      test: ["CMD", "kafka-broker-api-versions", "--bootstrap-server", "localhost:9092"]
      interval: 30s
      timeout: 10s
      retries: 3

  # MinIO Object Storage
  minio:
    image: minio/minio:latest
    hostname: minio
    container_name: weather-minio
    networks:
      - weather-network
    ports:
      - "9000:9000"
      - "9001:9001"
    environment:
      MINIO_ROOT_USER: minioadmin
      MINIO_ROOT_PASSWORD: minioadmin123
    volumes:
      - minio-data:/data
    command: server /data --console-address ":9001"
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Spring Boot Producer (module đã có)
  weather-producer:
    build:
      context: ./producer-springboot
      dockerfile: Dockerfile
    container_name: weather-producer
    networks:
      - weather-network
    depends_on:
      kafka:
        condition: service_healthy
    ports:
      - "8080:8080"
    environment:
      SPRING_KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      SPRING_PROFILES_ACTIVE: docker
    volumes:
      - ./data:/app/data  # Mount thư mục chứa CSV file

  # Spark Batch Processor
  spark-batch:
    build:
      context: ./spark-batch-minio
      dockerfile: Dockerfile
    container_name: weather-spark-batch
    networks:
      - weather-network
    depends_on:
      kafka:
        condition: service_healthy
      minio:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: weather-topic
      MINIO_ENDPOINT: http://minio:9000
      MINIO_ACCESS_KEY: minioadmin
      MINIO_SECRET_KEY: minioadmin123
      MINIO_BUCKET: weather-bucket
      JAVA_OPTS: -Xmx2g -Xms1g
    ports:
      - "4040:4040"  # Spark UI
    restart: unless-stopped
    # Chạy batch job theo schedule (mỗi 30 phút)
    command: >
      sh -c "
        while true; do
          java -jar /opt/spark-app/spark-batch-minio.jar
          echo 'Batch job completed, sleeping for 30 minutes...'
          sleep 1800
        done
      "

  # Spark Streaming (sẽ tạo sau)
  spark-streaming:
    build:
      context: ./spark-streaming-consumer
      dockerfile: Dockerfile
    container_name: weather-spark-streaming
    networks:
      - weather-network
    depends_on:
      kafka:
        condition: service_healthy
    environment:
      KAFKA_BOOTSTRAP_SERVERS: kafka:29092
      KAFKA_TOPIC: weather-topic
      JAVA_OPTS: -Xmx1g -Xms512m
    ports:
      - "4041:4040"  # Spark Streaming UI
    restart: unless-stopped

  # MinIO Client để tạo bucket
  minio-setup:
    image: minio/mc:latest
    container_name: weather-minio-setup
    networks:
      - weather-network
    depends_on:
      minio:
        condition: service_healthy
    entrypoint: >
      /bin/sh -c "
      /usr/bin/mc alias set myminio http://minio:9000 minioadmin minioadmin123;
      /usr/bin/mc mb myminio/weather-bucket --ignore-existing;
      /usr/bin/mc policy set public myminio/weather-bucket;
      exit 0;
      "
